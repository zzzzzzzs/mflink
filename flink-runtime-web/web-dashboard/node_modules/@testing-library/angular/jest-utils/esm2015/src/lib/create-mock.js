export function createMock(type) {
    const mock = {};
    function mockFunctions(proto) {
        if (!proto) {
            return;
        }
        for (const prop of Object.getOwnPropertyNames(proto)) {
            if (prop === 'constructor') {
                continue;
            }
            const descriptor = Object.getOwnPropertyDescriptor(proto, prop);
            if (typeof descriptor.value === 'function') {
                mock[prop] = jest.fn();
            }
        }
        mockFunctions(Object.getPrototypeOf(proto));
    }
    mockFunctions(type.prototype);
    return mock;
}
export function createMockWithValues(type, values) {
    const mock = createMock(type);
    Object.entries(values).forEach(([field, value]) => {
        mock[field] = value;
    });
    return mock;
}
export function provideMock(type) {
    return {
        provide: type,
        useValue: createMock(type),
    };
}
export function provideMockWithValues(type, values) {
    return {
        provide: type,
        useValue: createMockWithValues(type, values),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLW1vY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9qZXN0LXV0aWxzL3NyYy9saWIvY3JlYXRlLW1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxVQUFVLFVBQVUsQ0FBSSxJQUFhO0lBQ3pDLE1BQU0sSUFBSSxHQUFRLEVBQUUsQ0FBQztJQUVyQixTQUFTLGFBQWEsQ0FBQyxLQUFVO1FBQy9CLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPO1NBQ1I7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwRCxJQUFJLElBQUksS0FBSyxhQUFhLEVBQUU7Z0JBQzFCLFNBQVM7YUFDVjtZQUVELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEUsSUFBSSxPQUFPLFVBQVUsQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFO2dCQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO2FBQ3hCO1NBQ0Y7UUFFRCxhQUFhLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTlCLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBdUIsSUFBYSxFQUFFLE1BQWdDO0lBQ3hHLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU5QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDL0MsSUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUksSUFBYTtJQUMxQyxPQUFPO1FBQ0wsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQztLQUMzQixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBdUIsSUFBYSxFQUFFLE1BQWdDO0lBQ3pHLE9BQU87UUFDTCxPQUFPLEVBQUUsSUFBSTtRQUNiLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IHR5cGUgTW9jazxUPiA9IFQgJiB7IFtLIGluIGtleW9mIFRdOiBUW0tdICYgamVzdC5Nb2NrIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrPFQ+KHR5cGU6IFR5cGU8VD4pOiBNb2NrPFQ+IHtcbiAgY29uc3QgbW9jazogYW55ID0ge307XG5cbiAgZnVuY3Rpb24gbW9ja0Z1bmN0aW9ucyhwcm90bzogYW55KSB7XG4gICAgaWYgKCFwcm90bykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90bykpIHtcbiAgICAgIGlmIChwcm9wID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90bywgcHJvcCk7XG4gICAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbW9ja1twcm9wXSA9IGplc3QuZm4oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtb2NrRnVuY3Rpb25zKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykpO1xuICB9XG5cbiAgbW9ja0Z1bmN0aW9ucyh0eXBlLnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIG1vY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrV2l0aFZhbHVlczxULCBLIGV4dGVuZHMga2V5b2YgVD4odHlwZTogVHlwZTxUPiwgdmFsdWVzOiBQYXJ0aWFsPFJlY29yZDxLLCBUW0tdPj4pOiBNb2NrPFQ+IHtcbiAgY29uc3QgbW9jayA9IGNyZWF0ZU1vY2sodHlwZSk7XG5cbiAgT2JqZWN0LmVudHJpZXModmFsdWVzKS5mb3JFYWNoKChbZmllbGQsIHZhbHVlXSkgPT4ge1xuICAgIChtb2NrIGFzIGFueSlbZmllbGRdID0gdmFsdWU7XG4gIH0pO1xuXG4gIHJldHVybiBtb2NrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZU1vY2s8VD4odHlwZTogVHlwZTxUPik6IFByb3ZpZGVyIHtcbiAgcmV0dXJuIHtcbiAgICBwcm92aWRlOiB0eXBlLFxuICAgIHVzZVZhbHVlOiBjcmVhdGVNb2NrKHR5cGUpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZU1vY2tXaXRoVmFsdWVzPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPih0eXBlOiBUeXBlPFQ+LCB2YWx1ZXM6IFBhcnRpYWw8UmVjb3JkPEssIFRbS10+Pik6IFByb3ZpZGVyIHtcbiAgcmV0dXJuIHtcbiAgICBwcm92aWRlOiB0eXBlLFxuICAgIHVzZVZhbHVlOiBjcmVhdGVNb2NrV2l0aFZhbHVlcyh0eXBlLCB2YWx1ZXMpLFxuICB9O1xufVxuIl19