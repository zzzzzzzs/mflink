(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/core/testing'), require('@angular/platform-browser'), require('@angular/platform-browser/animations'), require('@angular/router'), require('@angular/router/testing'), require('@testing-library/dom')) :
    typeof define === 'function' && define.amd ? define('@testing-library/angular', ['exports', '@angular/core', '@angular/core/testing', '@angular/platform-browser', '@angular/platform-browser/animations', '@angular/router', '@angular/router/testing', '@testing-library/dom'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['testing-library'] = global['testing-library'] || {}, global['testing-library'].angular = {}), global.ng.core, global.ng.core.testing, global.ng.platformBrowser, global.ng.platformBrowser.animations, global.ng.router, global.ng.router.testing, global.dom));
}(this, (function (exports, core, testing, platformBrowser, animations, router, testing$1, dom) { 'use strict';

    var config = {
        dom: {},
        defaultImports: [],
    };
    function configure(newConfig) {
        if (typeof newConfig === 'function') {
            // Pass the existing config out to the provided function
            // and accept a delta in return
            newConfig = newConfig(config);
        }
        // Merge the incoming config delta
        config = Object.assign(Object.assign({}, config), newConfig);
    }
    function getConfig() {
        return config;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest$1(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __rest = (this && this.__rest) || function (s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var _a;
    var mountedFixtures = new Set();
    var inject = testing.TestBed.inject || testing.TestBed.get;
    function render(sut, renderOptions) {
        if (renderOptions === void 0) { renderOptions = {}; }
        return __awaiter(this, void 0, void 0, function () {
            function detectChanges() {
                if (isAlive) {
                    fixture.detectChanges();
                }
            }
            var _a, domConfig, globalConfig, _b, _c, detectChangesOnRender, _d, declarations, _e, imports, _f, providers, _g, schemas, queries, _h, template, _j, wrapper, _k, componentProperties, _l, componentProviders, _m, excludeComponentDeclaration, routes, _o, removeAngularAttributes, _p, defaultImports, fixture, idAttribute, isAlive, changes, rerender, router$1, zone, navigate;
            var _this = this;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        _a = getConfig(), domConfig = _a.dom, globalConfig = __rest(_a, ["dom"]);
                        _b = Object.assign(Object.assign({}, globalConfig), renderOptions), _c = _b.detectChanges, detectChangesOnRender = _c === void 0 ? true : _c, _d = _b.declarations, declarations = _d === void 0 ? [] : _d, _e = _b.imports, imports = _e === void 0 ? [] : _e, _f = _b.providers, providers = _f === void 0 ? [] : _f, _g = _b.schemas, schemas = _g === void 0 ? [] : _g, queries = _b.queries, _h = _b.template, template = _h === void 0 ? undefined : _h, _j = _b.wrapper, wrapper = _j === void 0 ? WrapperComponent : _j, _k = _b.componentProperties, componentProperties = _k === void 0 ? {} : _k, _l = _b.componentProviders, componentProviders = _l === void 0 ? [] : _l, _m = _b.excludeComponentDeclaration, excludeComponentDeclaration = _m === void 0 ? false : _m, routes = _b.routes, _o = _b.removeAngularAttributes, removeAngularAttributes = _o === void 0 ? false : _o, _p = _b.defaultImports, defaultImports = _p === void 0 ? [] : _p;
                        dom.configure(Object.assign({ eventWrapper: function (cb) {
                                var result = cb();
                                detectChangesForMountedFixtures();
                                return result;
                            } }, domConfig));
                        testing.TestBed.configureTestingModule({
                            declarations: addAutoDeclarations(sut, {
                                declarations: declarations,
                                excludeComponentDeclaration: excludeComponentDeclaration,
                                template: template,
                                wrapper: wrapper,
                            }),
                            imports: addAutoImports({
                                imports: imports.concat(defaultImports),
                                routes: routes,
                            }),
                            providers: __spreadArray([], __read(providers)),
                            schemas: __spreadArray([], __read(schemas)),
                        });
                        if (componentProviders) {
                            componentProviders
                                .reduce(function (acc, provider) { return acc.concat(provider); }, [])
                                .forEach(function (p) {
                                var provide = p.provide, provider = __rest(p, ["provide"]);
                                testing.TestBed.overrideProvider(provide, provider);
                            });
                        }
                        return [4 /*yield*/, createComponentFixture(sut, { template: template, wrapper: wrapper })];
                    case 1:
                        fixture = _q.sent();
                        setComponentProperties(fixture, { componentProperties: componentProperties });
                        if (removeAngularAttributes) {
                            fixture.nativeElement.removeAttribute('ng-version');
                            idAttribute = fixture.nativeElement.getAttribute('id');
                            if (idAttribute && idAttribute.startsWith('root')) {
                                fixture.nativeElement.removeAttribute('id');
                            }
                        }
                        mountedFixtures.add(fixture);
                        return [4 /*yield*/, testing.TestBed.compileComponents()];
                    case 2:
                        _q.sent();
                        isAlive = true;
                        fixture.componentRef.onDestroy(function () { return (isAlive = false); });
                        // Call ngOnChanges on initial render
                        if (hasOnChangesHook(fixture.componentInstance)) {
                            changes = getChangesObj(null, componentProperties);
                            fixture.componentInstance.ngOnChanges(changes);
                        }
                        if (detectChangesOnRender) {
                            detectChanges();
                        }
                        rerender = function (rerenderedProperties) {
                            var changes = getChangesObj(fixture.componentInstance, rerenderedProperties);
                            setComponentProperties(fixture, { componentProperties: rerenderedProperties });
                            if (hasOnChangesHook(fixture.componentInstance)) {
                                fixture.componentInstance.ngOnChanges(changes);
                            }
                            fixture.componentRef.injector.get(core.ChangeDetectorRef).detectChanges();
                        };
                        router$1 = routes ? inject(router.Router) : null;
                        zone = inject(core.NgZone);
                        navigate = function (elementOrPath, basePath) {
                            if (basePath === void 0) { basePath = ''; }
                            return __awaiter(_this, void 0, void 0, function () {
                                var href, _b, path, params, queryParams, navigateOptions, doNavigate, result;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            if (!router$1) {
                                                router$1 = inject(router.Router);
                                            }
                                            href = typeof elementOrPath === 'string' ? elementOrPath : elementOrPath.getAttribute('href');
                                            _b = __read((basePath + href).split('?'), 2), path = _b[0], params = _b[1];
                                            queryParams = params
                                                ? params.split('&').reduce(function (qp, q) {
                                                    var _b = __read(q.split('='), 2), key = _b[0], value = _b[1];
                                                    // TODO(Breaking): group same keys qp[key] ? [...qp[key], value] : value
                                                    qp[key] = value;
                                                    return qp;
                                                }, {})
                                                : undefined;
                                            navigateOptions = queryParams
                                                ? {
                                                    queryParams: queryParams,
                                                }
                                                : undefined;
                                            doNavigate = function () { return (navigateOptions ? router$1.navigate([path], navigateOptions) : router$1.navigate([path])); };
                                            if (!zone) return [3 /*break*/, 2];
                                            return [4 /*yield*/, zone.run(function () { return (result = doNavigate()); })];
                                        case 1:
                                            _c.sent();
                                            return [3 /*break*/, 3];
                                        case 2:
                                            result = doNavigate();
                                            _c.label = 3;
                                        case 3:
                                            detectChanges();
                                            return [2 /*return*/, result];
                                    }
                                });
                            });
                        };
                        return [2 /*return*/, Object.assign({ fixture: fixture,
                                detectChanges: detectChanges,
                                navigate: navigate,
                                rerender: rerender, debugElement: typeof sut === 'string' ? fixture.debugElement : fixture.debugElement.query(platformBrowser.By.directive(sut)), container: fixture.nativeElement, debug: function (element, maxLength, options) {
                                    if (element === void 0) { element = fixture.nativeElement; }
                                    return Array.isArray(element)
                                        ? element.forEach(function (e) { return console.log(dom.prettyDOM(e, maxLength, options)); })
                                        : console.log(dom.prettyDOM(element, maxLength, options));
                                } }, replaceFindWithFindAndDetectChanges(dom.getQueriesForElement(fixture.nativeElement, queries)))];
                }
            });
        });
    }
    function createComponent(component) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: 
                    /* Make sure angular application is initialized before creating component */
                    return [4 /*yield*/, inject(core.ApplicationInitStatus).donePromise];
                    case 1:
                        /* Make sure angular application is initialized before creating component */
                        _b.sent();
                        return [2 /*return*/, testing.TestBed.createComponent(component)];
                }
            });
        });
    }
    function createComponentFixture(sut, _b) {
        var template = _b.template, wrapper = _b.wrapper;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                if (typeof sut === 'string') {
                    testing.TestBed.overrideTemplate(wrapper, sut);
                    return [2 /*return*/, createComponent(wrapper)];
                }
                if (template) {
                    testing.TestBed.overrideTemplate(wrapper, template);
                    return [2 /*return*/, createComponent(wrapper)];
                }
                return [2 /*return*/, createComponent(sut)];
            });
        });
    }
    function setComponentProperties(fixture, _b) {
        var e_1, _c;
        var _d = _b.componentProperties, componentProperties = _d === void 0 ? {} : _d;
        var _a;
        var _loop_1 = function (key) {
            var descriptor = Object.getOwnPropertyDescriptor(fixture.componentInstance.constructor.prototype, key);
            var _value = componentProperties[key];
            var defaultGetter = function () { return _value; };
            var extendedSetter = function (value) {
                var _a;
                _value = value;
                (_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.set) === null || _a === void 0 ? void 0 : _a.call(fixture.componentInstance, _value);
                fixture.detectChanges();
            };
            Object.defineProperty(fixture.componentInstance, key, {
                get: (descriptor === null || descriptor === void 0 ? void 0 : descriptor.get) || defaultGetter,
                set: extendedSetter,
                // Allow the property to be defined again later.
                // This happens when the component properties are updated after initial render.
                // For Jest this is `true` by default, for Karma and a real browser the default is `false`
                configurable: true,
            });
            (_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.set) === null || _a === void 0 ? void 0 : _a.call(fixture.componentInstance, _value);
        };
        try {
            for (var _e = __values(Object.keys(componentProperties)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var key = _f.value;
                _loop_1(key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return fixture;
    }
    function hasOnChangesHook(componentInstance) {
        return ('ngOnChanges' in componentInstance && typeof componentInstance.ngOnChanges === 'function');
    }
    function getChangesObj(oldProps, newProps) {
        var isFirstChange = oldProps === null;
        return Object.keys(newProps).reduce(function (changes, key) {
            var _b;
            return (Object.assign(Object.assign({}, changes), (_b = {}, _b[key] = new core.SimpleChange(isFirstChange ? null : oldProps[key], newProps[key], isFirstChange), _b)));
        }, {});
    }
    function addAutoDeclarations(sut, _b) {
        var declarations = _b.declarations, excludeComponentDeclaration = _b.excludeComponentDeclaration, template = _b.template, wrapper = _b.wrapper;
        if (typeof sut === 'string') {
            return __spreadArray(__spreadArray([], __read(declarations)), [wrapper]);
        }
        var wrappers = function () { return (template ? [wrapper] : []); };
        var components = function () { return (excludeComponentDeclaration ? [] : [sut]); };
        return __spreadArray(__spreadArray(__spreadArray([], __read(declarations)), __read(wrappers())), __read(components()));
    }
    function addAutoImports(_b) {
        var imports = _b.imports, routes = _b.routes;
        var animations$1 = function () {
            var animationIsDefined = imports.indexOf(animations.NoopAnimationsModule) > -1 || imports.indexOf(animations.BrowserAnimationsModule) > -1;
            return animationIsDefined ? [] : [animations.NoopAnimationsModule];
        };
        var routing = function () { return (routes ? [testing$1.RouterTestingModule.withRoutes(routes)] : []); };
        return __spreadArray(__spreadArray(__spreadArray([], __read(imports)), __read(animations$1())), __read(routing()));
    }
    /**
     * Wrap waitFor to invoke the Angular change detection cycle before invoking the callback
     */
    function waitForWrapper(detectChanges, callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            var inFakeAsync;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        inFakeAsync = true;
                        try {
                            testing.tick(0);
                        }
                        catch (err) {
                            inFakeAsync = false;
                        }
                        detectChanges();
                        return [4 /*yield*/, dom.waitFor(function () {
                                setTimeout(function () { return detectChanges(); }, 0);
                                if (inFakeAsync) {
                                    testing.tick(0);
                                }
                                return callback();
                            }, options)];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    }
    /**
     * Wrap waitForElementToBeRemovedWrapper to poke the Angular change detection cycle before invoking the callback
     */
    function waitForElementToBeRemovedWrapper(detectChanges, callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            var cb, elements, getRemainingElements_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (typeof callback !== 'function') {
                            elements = (Array.isArray(callback) ? callback : [callback]);
                            getRemainingElements_1 = elements.map(function (element) {
                                var parent = element.parentElement;
                                while (parent.parentElement) {
                                    parent = parent.parentElement;
                                }
                                return function () { return (parent.contains(element) ? element : null); };
                            });
                            cb = function () { return getRemainingElements_1.map(function (c) { return c(); }).filter(Boolean); };
                        }
                        else {
                            cb = callback;
                        }
                        return [4 /*yield*/, dom.waitForElementToBeRemoved(function () {
                                var result = cb();
                                detectChanges();
                                return result;
                            }, options)];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    }
    function cleanup() {
        mountedFixtures.forEach(cleanupAtFixture);
    }
    function cleanupAtFixture(fixture) {
        fixture.destroy();
        if (!fixture.nativeElement.getAttribute('ng-version') && fixture.nativeElement.parentNode === document.body) {
            document.body.removeChild(fixture.nativeElement);
        }
        mountedFixtures.delete(fixture);
    }
    // if we're running in a test runner that supports afterEach
    // then we'll automatically run cleanup afterEach test
    // this ensures that tests run in isolation from each other
    // if you don't like this, set the ATL_SKIP_AUTO_CLEANUP env variable to 'true'
    if (typeof process === 'undefined' || !((_a = process.env) === null || _a === void 0 ? void 0 : _a.ATL_SKIP_AUTO_CLEANUP)) {
        if (typeof afterEach === 'function') {
            afterEach(function () {
                cleanup();
            });
        }
    }
    // TODO: rename to `atl-wrapper-component`
    // eslint-disable-next-line @angular-eslint/component-selector
    var WrapperComponent = /** @class */ (function () {
        function WrapperComponent() {
        }
        return WrapperComponent;
    }());
    WrapperComponent.decorators = [
        { type: core.Component, args: [{ selector: 'wrapper-component', template: '' },] }
    ];
    /**
     * Wrap findBy queries to poke the Angular change detection cycle
     */
    function replaceFindWithFindAndDetectChanges(originalQueriesForContainer) {
        var _this = this;
        return Object.keys(originalQueriesForContainer).reduce(function (newQueries, key) {
            var getByQuery = originalQueriesForContainer[key.replace('find', 'get')];
            if (key.startsWith('find') && getByQuery) {
                newQueries[key] = function (text, options, waitOptions) { return __awaiter(_this, void 0, void 0, function () {
                    var result;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, waitForWrapper(detectChangesForMountedFixtures, function () { return getByQuery(text, options); }, waitOptions)];
                            case 1:
                                result = _b.sent();
                                return [2 /*return*/, result];
                        }
                    });
                }); };
            }
            else {
                newQueries[key] = originalQueriesForContainer[key];
            }
            return newQueries;
        }, {});
    }
    /**
     * Call detectChanges for all fixtures
     */
    function detectChangesForMountedFixtures() {
        mountedFixtures.forEach(function (fixture) {
            try {
                fixture.detectChanges();
            }
            catch (err) {
                if (!err.message.startsWith('ViewDestroyedError')) {
                    throw err;
                }
            }
        });
    }
    /**
     * Re-export screen with patched queries
     */
    var screen = replaceFindWithFindAndDetectChanges(dom.screen);
    /**
     * Re-export waitFor with patched waitFor
     */
    function waitFor(callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, waitForWrapper(detectChangesForMountedFixtures, callback, options)];
            });
        });
    }
    /**
     * Re-export waitForElementToBeRemoved with patched waitForElementToBeRemoved
     */
    function waitForElementToBeRemoved(callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, waitForElementToBeRemovedWrapper(detectChangesForMountedFixtures, callback, options)];
            });
        });
    }

    /*
     * Public API Surface of testing-library
     */

    /**
     * Generated bundle index. Do not edit.
     */

    Object.defineProperty(exports, 'buildQueries', {
        enumerable: true,
        get: function () {
            return dom.buildQueries;
        }
    });
    Object.defineProperty(exports, 'createEvent', {
        enumerable: true,
        get: function () {
            return dom.createEvent;
        }
    });
    Object.defineProperty(exports, 'findAllByAltText', {
        enumerable: true,
        get: function () {
            return dom.findAllByAltText;
        }
    });
    Object.defineProperty(exports, 'findAllByDisplayValue', {
        enumerable: true,
        get: function () {
            return dom.findAllByDisplayValue;
        }
    });
    Object.defineProperty(exports, 'findAllByLabelText', {
        enumerable: true,
        get: function () {
            return dom.findAllByLabelText;
        }
    });
    Object.defineProperty(exports, 'findAllByPlaceholderText', {
        enumerable: true,
        get: function () {
            return dom.findAllByPlaceholderText;
        }
    });
    Object.defineProperty(exports, 'findAllByRole', {
        enumerable: true,
        get: function () {
            return dom.findAllByRole;
        }
    });
    Object.defineProperty(exports, 'findAllByTestId', {
        enumerable: true,
        get: function () {
            return dom.findAllByTestId;
        }
    });
    Object.defineProperty(exports, 'findAllByText', {
        enumerable: true,
        get: function () {
            return dom.findAllByText;
        }
    });
    Object.defineProperty(exports, 'findAllByTitle', {
        enumerable: true,
        get: function () {
            return dom.findAllByTitle;
        }
    });
    Object.defineProperty(exports, 'findByAltText', {
        enumerable: true,
        get: function () {
            return dom.findByAltText;
        }
    });
    Object.defineProperty(exports, 'findByDisplayValue', {
        enumerable: true,
        get: function () {
            return dom.findByDisplayValue;
        }
    });
    Object.defineProperty(exports, 'findByLabelText', {
        enumerable: true,
        get: function () {
            return dom.findByLabelText;
        }
    });
    Object.defineProperty(exports, 'findByPlaceholderText', {
        enumerable: true,
        get: function () {
            return dom.findByPlaceholderText;
        }
    });
    Object.defineProperty(exports, 'findByRole', {
        enumerable: true,
        get: function () {
            return dom.findByRole;
        }
    });
    Object.defineProperty(exports, 'findByTestId', {
        enumerable: true,
        get: function () {
            return dom.findByTestId;
        }
    });
    Object.defineProperty(exports, 'findByText', {
        enumerable: true,
        get: function () {
            return dom.findByText;
        }
    });
    Object.defineProperty(exports, 'findByTitle', {
        enumerable: true,
        get: function () {
            return dom.findByTitle;
        }
    });
    Object.defineProperty(exports, 'fireEvent', {
        enumerable: true,
        get: function () {
            return dom.fireEvent;
        }
    });
    Object.defineProperty(exports, 'getAllByAltText', {
        enumerable: true,
        get: function () {
            return dom.getAllByAltText;
        }
    });
    Object.defineProperty(exports, 'getAllByDisplayValue', {
        enumerable: true,
        get: function () {
            return dom.getAllByDisplayValue;
        }
    });
    Object.defineProperty(exports, 'getAllByLabelText', {
        enumerable: true,
        get: function () {
            return dom.getAllByLabelText;
        }
    });
    Object.defineProperty(exports, 'getAllByPlaceholderText', {
        enumerable: true,
        get: function () {
            return dom.getAllByPlaceholderText;
        }
    });
    Object.defineProperty(exports, 'getAllByRole', {
        enumerable: true,
        get: function () {
            return dom.getAllByRole;
        }
    });
    Object.defineProperty(exports, 'getAllByTestId', {
        enumerable: true,
        get: function () {
            return dom.getAllByTestId;
        }
    });
    Object.defineProperty(exports, 'getAllByText', {
        enumerable: true,
        get: function () {
            return dom.getAllByText;
        }
    });
    Object.defineProperty(exports, 'getAllByTitle', {
        enumerable: true,
        get: function () {
            return dom.getAllByTitle;
        }
    });
    Object.defineProperty(exports, 'getByAltText', {
        enumerable: true,
        get: function () {
            return dom.getByAltText;
        }
    });
    Object.defineProperty(exports, 'getByDisplayValue', {
        enumerable: true,
        get: function () {
            return dom.getByDisplayValue;
        }
    });
    Object.defineProperty(exports, 'getByLabelText', {
        enumerable: true,
        get: function () {
            return dom.getByLabelText;
        }
    });
    Object.defineProperty(exports, 'getByPlaceholderText', {
        enumerable: true,
        get: function () {
            return dom.getByPlaceholderText;
        }
    });
    Object.defineProperty(exports, 'getByRole', {
        enumerable: true,
        get: function () {
            return dom.getByRole;
        }
    });
    Object.defineProperty(exports, 'getByTestId', {
        enumerable: true,
        get: function () {
            return dom.getByTestId;
        }
    });
    Object.defineProperty(exports, 'getByText', {
        enumerable: true,
        get: function () {
            return dom.getByText;
        }
    });
    Object.defineProperty(exports, 'getByTitle', {
        enumerable: true,
        get: function () {
            return dom.getByTitle;
        }
    });
    Object.defineProperty(exports, 'getDefaultNormalizer', {
        enumerable: true,
        get: function () {
            return dom.getDefaultNormalizer;
        }
    });
    Object.defineProperty(exports, 'getElementError', {
        enumerable: true,
        get: function () {
            return dom.getElementError;
        }
    });
    Object.defineProperty(exports, 'getNodeText', {
        enumerable: true,
        get: function () {
            return dom.getNodeText;
        }
    });
    Object.defineProperty(exports, 'getQueriesForElement', {
        enumerable: true,
        get: function () {
            return dom.getQueriesForElement;
        }
    });
    Object.defineProperty(exports, 'getRoles', {
        enumerable: true,
        get: function () {
            return dom.getRoles;
        }
    });
    Object.defineProperty(exports, 'isInaccessible', {
        enumerable: true,
        get: function () {
            return dom.isInaccessible;
        }
    });
    Object.defineProperty(exports, 'logDOM', {
        enumerable: true,
        get: function () {
            return dom.logDOM;
        }
    });
    Object.defineProperty(exports, 'logRoles', {
        enumerable: true,
        get: function () {
            return dom.logRoles;
        }
    });
    Object.defineProperty(exports, 'prettyDOM', {
        enumerable: true,
        get: function () {
            return dom.prettyDOM;
        }
    });
    Object.defineProperty(exports, 'queries', {
        enumerable: true,
        get: function () {
            return dom.queries;
        }
    });
    Object.defineProperty(exports, 'queryAllByAltText', {
        enumerable: true,
        get: function () {
            return dom.queryAllByAltText;
        }
    });
    Object.defineProperty(exports, 'queryAllByAttribute', {
        enumerable: true,
        get: function () {
            return dom.queryAllByAttribute;
        }
    });
    Object.defineProperty(exports, 'queryAllByDisplayValue', {
        enumerable: true,
        get: function () {
            return dom.queryAllByDisplayValue;
        }
    });
    Object.defineProperty(exports, 'queryAllByLabelText', {
        enumerable: true,
        get: function () {
            return dom.queryAllByLabelText;
        }
    });
    Object.defineProperty(exports, 'queryAllByPlaceholderText', {
        enumerable: true,
        get: function () {
            return dom.queryAllByPlaceholderText;
        }
    });
    Object.defineProperty(exports, 'queryAllByRole', {
        enumerable: true,
        get: function () {
            return dom.queryAllByRole;
        }
    });
    Object.defineProperty(exports, 'queryAllByTestId', {
        enumerable: true,
        get: function () {
            return dom.queryAllByTestId;
        }
    });
    Object.defineProperty(exports, 'queryAllByText', {
        enumerable: true,
        get: function () {
            return dom.queryAllByText;
        }
    });
    Object.defineProperty(exports, 'queryAllByTitle', {
        enumerable: true,
        get: function () {
            return dom.queryAllByTitle;
        }
    });
    Object.defineProperty(exports, 'queryByAltText', {
        enumerable: true,
        get: function () {
            return dom.queryByAltText;
        }
    });
    Object.defineProperty(exports, 'queryByAttribute', {
        enumerable: true,
        get: function () {
            return dom.queryByAttribute;
        }
    });
    Object.defineProperty(exports, 'queryByDisplayValue', {
        enumerable: true,
        get: function () {
            return dom.queryByDisplayValue;
        }
    });
    Object.defineProperty(exports, 'queryByLabelText', {
        enumerable: true,
        get: function () {
            return dom.queryByLabelText;
        }
    });
    Object.defineProperty(exports, 'queryByPlaceholderText', {
        enumerable: true,
        get: function () {
            return dom.queryByPlaceholderText;
        }
    });
    Object.defineProperty(exports, 'queryByRole', {
        enumerable: true,
        get: function () {
            return dom.queryByRole;
        }
    });
    Object.defineProperty(exports, 'queryByTestId', {
        enumerable: true,
        get: function () {
            return dom.queryByTestId;
        }
    });
    Object.defineProperty(exports, 'queryByText', {
        enumerable: true,
        get: function () {
            return dom.queryByText;
        }
    });
    Object.defineProperty(exports, 'queryByTitle', {
        enumerable: true,
        get: function () {
            return dom.queryByTitle;
        }
    });
    Object.defineProperty(exports, 'queryHelpers', {
        enumerable: true,
        get: function () {
            return dom.queryHelpers;
        }
    });
    Object.defineProperty(exports, 'within', {
        enumerable: true,
        get: function () {
            return dom.within;
        }
    });
    exports.configure = configure;
    exports.getConfig = getConfig;
    exports.render = render;
    exports.screen = screen;
    exports.waitFor = waitFor;
    exports.waitForElementToBeRemoved = waitForElementToBeRemoved;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=testing-library-angular.umd.js.map
